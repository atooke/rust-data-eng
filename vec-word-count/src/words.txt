Dummy text to use for word counting, words are super important and words words words
    Vec (Vector):
        Vec is a dynamically resizable array.
        It stores its elements in a contiguous memory block, providing constant time access to elements by index.
        Insertions and removals at the end of the vector (pushing and popping) are efficient (amortized O(1)), but insertions and removals at arbitrary positions are expensive (O(n)), as it may require moving elements to accommodate the change in size.
        Vec is suitable for cases where you mostly access elements by index and need efficient dynamic resizing.

    VecDeque (Double-ended Queue):
        VecDeque is a double-ended queue implemented with a growable ring buffer.
        It allows efficient insertion and removal of elements at both ends of the queue (front and back), with amortized O(1) time complexity.
        Unlike Vec, VecDeque provides efficient insertion and removal at both ends, making it suitable for use cases where you need to frequently manipulate both ends of the collection, such as implementing queues and double-ended stacks.

    LinkedList:
        LinkedList is a doubly linked list.
        It allows efficient insertion and removal of elements at arbitrary positions (including the front and back) with O(1) time complexity.
        Accessing elements by index is not efficient (requires traversing the list), so it's typically not used when frequent random access is required.
        LinkedList is useful when you frequently need to insert or remove elements in the middle of the list or when you need to efficiently splice lists together.

In summary:

    Use Vec when you need dynamic resizing and mostly access elements by index.
    Use VecDeque when you need efficient insertion and removal at both ends of the collection.
    Use LinkedList when you need efficient insertion and removal at arbitrary positions within the collection.